#!/bin/bash

# Quick first initialize, adding all files & folders and making the first commit.
function gini {
  git init
  git add .
  if [[ $# == 0 ]]; then
    git commit -m "First initialize"
  else
    git commit -m "$1"
  fi
}

# Add all files and ammend to last commit
function gam () {
    local msg=""
    git add .
    if [[ ! -z "$@" ]]; then
      $msg="-m \"$@\"" 
    fi
    git commit --amend --no-edit $msg
}

# [gc]
# Commit either passed files or all changs
# Depends if the thirds parameter is existend and contains files
# @1: Message
# @2: Files
function git_commit () {
  # Check if there are file paremeters passed
  # Otherwise commit all changes 
  if [[ ! -z "$2" ]]; then
    git commit -m $@
  else
    git commit -am $@
  fi
}

# [bb]
# git branch that creates a branch if it doesn't exist in the local
# repo but does in the origin branch
# note: gb is set by default for some reason
function gitswitchbranch () {
  # Show branch list if there were no input parameters
  if [[ -z "$@" ]]; then
    git branch
    return
  fi

  local git_branch="$1"
  
  # Switch to local branch if one exists
  # Or switch to origin branch if one exists and create a local branch
  # Or switch to the last branch if input is "-"
  if [[ "$git_branch" == "-" ]]; then 
    git checkout "-"
  elif [[ -n $(git show-ref "refs/heads/$git_branch") ]]; then 
    git checkout "$git_branch"
  elif [[ -n $(git show-ref "origin/$git_branch") ]]; then 
    git checkout --quiet "origin/$git_branch"
    git checkout -b "$git_branch"
  elif revlist=`git rev-list HEAD..$git_branch 2>/dev/null` && [ -z "$revlist" ]; then 
    git checkout "$git_branch"
  elif [[ "$git_branch" == "dev" ]]; then
    gbc dev
  else
    echo "No such branch $git_branch"
  fi
}

# Check out the latest branch
function glat () {
  # Return branches sorted by commitdate and reduce the count to one
  # Samples local and remote branches
  # http://stackoverflow.com/a/5972362
  local branch=`git for-each-ref --count=1 --sort=-committerdate refs/heads/ refs/remotes/ --format='%(refname:short)'`
  gitswitchbranch ${branch##origin/} # Remove the origin from the branch name
}

# List unchanged assumed files
function assumed () {
  git ls-files -v `git rev-parse --show-toplevel` | grep "^[a-z]"
}

# Assume a file
function assume () {
  git update-index --assume-unchanged $1
}

# Assumes all files specified in the file ".gitassume"
function assumefiles_from_file () {
  local toggle=$1
  local rcfile=".gitassume"
  cd $(git rev-parse --show-toplevel) # Cd into the root git folder
  if [[ -f $rcfile ]]; then
    while read line
    do
        local name=$line
        if [[ $toggle == true ]]; then
          echo "Assuming: $name"
          assume $name
        else
          echo "Unassuming: $name"
          unassume $name
        fi
    done < $rcfile
  fi
}

function ass () {
  assumefiles_from_file true
}

function unass () {
  assumefiles_from_file false
}

function unassume () {
    git update-index --no-assume-unchanged $1
}

# Toggle assumed files
function toggleassumed () {

  # Get the assumed files from the assumed function
  local assumed_files="`assumed`"

  # If the current input is not empty
  # Either unassume the file when the file is found in the assumed files list
  # Or assume when it's not fout
  if [[ ! -z $* && -f $1 ]]; then
    echo $assumed_files | grep "$1" && unassume "$1" || assume "$1"
  elif [[ ! -f $1 ]]; then
    echo "Not a file!"
  fi
}

function clonecd {
    url=$1;
    # If there is no user input name the repo folder after the repo name
    if [[ -z "$2" ]]; then
      reponame=$(echo $url | awk -F/ '{print $NF}' | sed -e 's/.git$//');
    else
      reponame="$2"
    fi
    git clone --recursive $url $reponame;
    cd $reponame;
}
function groot () {
  cd $(git rev-parse --show-toplevel)
}

# [gbda]:
# Deletes remote and local git branch
# @1: [branch]
function gbda () {
  if [[ -z "$@" ]]; then
    tip "[gbda]:"
    echo "Deletes remote and local git branch"
    echo "@1: {branchname}"
  fi
  git branch -D "$1"
  git push origin ":$1"
}

# Quickly go to various branches
function master () { gb master }

# Set the current or defined branch to the upstream
function gset () {
  if [[ -z $1 ]]; then
    local branch=$(git rev-parse --abbrev-ref HEAD)
  else
    local branch=$1
  fi
  git branch --set-upstream-to=origin/$branch $branch
}

# Reset and clean everything
function grha () {
  git reset --hard 
  git clean -f -d
}

function gup () {
  git checkout "HEAD^"
}

function gsad () {
  git stash apply
  git stash drop
}

# Rebase from current branch
function grb () {
  local dst_branch=`git rev-parse --abbrev-ref HEAD`
  git checkout $1
  git rebase $dst_branch
  git checkout $dst_branch
}

function git_check_staged () {
  local staged_files="`git diff --staged --name-only`"
  if [[ -z $@ ]]; then
    if [[ -z $staged_files ]]; then
      git commit -am $@
    else
      git commit -m $@
    fi
  else
    git_commit $@
  fi
}